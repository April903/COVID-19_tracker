{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isInfected","isRecovered","isDeaths","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","ChangeMapView","coords","zoom","useMap","setView","Map","countries","MapContainer","TileLayer","url","attribution","Table","options","plugins","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","fill","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb016771.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({\n  title,\n  cases,\n  active,\n  isInfected,\n  isRecovered,\n  isDeaths,\n  total,\n  ...props\n}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isInfected && \"infoBox--red\"\n      } ${isRecovered && \"infoBox--green\"} ${isDeaths && \"infoBox--grey\"}`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        <h2\n          className={`infoBox__cases ${isInfected && \"infoBox__cases--red\"} ${\n            isRecovered && \"infoBox__cases--green\"\n          } ${isDeaths && \"infoBox__cases--grey\"}`}\n        >\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 300,\n  },\n  deaths: {\n    hex: \"#8e80a8\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 700,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => b.cases - a.cases);\n\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n// DRAW circles on the map with interactive tooltop.\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div>{casesType}</div>\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0.0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0.0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0.0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction ChangeMapView({ coords, zoom }) {\n  const map = useMap();\n  map.setView(coords);\n  return null;\n}\n\nfunction Map({ countries, casesType, center, zoom }) {\n  //console.log(casesType);\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n        <ChangeMapView coords={center} zoom={zoom} />\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 300,\n  },\n  deaths: {\n    hex: \"#8e80a8\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(142, 128, 168, 0.494)\",\n    multiplier: 700,\n  },\n};\n\nconst options = {\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  const chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesTypeColors[casesType].half_op,\n                borderColor: casesTypeColors[casesType].hex,\n                data: data,\n                fill: true,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect, useDebugValue } from \"react\";\nimport \"./App.css\";\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // STATE = How to write a variable in REACT\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // useEffect = Runs a piece of code based on a give condition\n  useEffect(() => {\n    // code inside here will run once when the component loads and not\n    // again after\n    // async -> send a request, wait for it, do sth with input\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          //console.log(\"Set\", mapCountries);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        //console.log([data.countryInfo.lat, data.countryInfo.long]);\n        //console.log(mapCenter);\n        //console.log(mapZoom);\n        setMapZoom(4);\n        console.log(mapZoom);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isInfected={true}\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            isRecovered={true}\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            isDeaths={true}\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Total Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}